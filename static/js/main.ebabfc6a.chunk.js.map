{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["addContact","createAction","deleteContact","changeFilter","initialState","savedState","JSON","parse","localStorage","getItem","error","console","items","createReducer","actions","state","payload","filter","id","_","combineReducers","store","configureStore","reducer","contacts","contactsReducer","subscribe","setItem","stringify","saveState","getState","ContactForm","name","number","newContact","props","find","contact","alert","uuidv4","onAddContact","setState","changeHandler","e","target","value","className","onSubmit","preventDefault","onChange","this","type","pattern","title","required","Component","connect","dispatch","contactsAction","ContactListItem","onDelete","onClick","ContactList","onDeleteContact","toLowerCase","includes","trim","map","defaultProps","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ebabfc6a.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const addContact = createAction('contacts/add');\r\n\r\nexport const deleteContact = createAction('contacts/delete');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n\r\n// w/o toolkit\r\n\r\n// import types from './contacts-types';\r\n\r\n// const addContact = (contact) => ({\r\n//   type: types.ADD,\r\n//   payload: contact,\r\n// });\r\n\r\n// const deleteContact = (contactId) => ({\r\n//   type: types.DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// const changeFilter = (filter) => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: filter,\r\n// });\r\n\r\n// export { addContact, deleteContact, changeFilter };\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\n\r\nimport * as actions from './contacts-actions';\r\n\r\nlet initialState = [];\r\n\r\ntry {\r\n  const savedState = JSON.parse(localStorage.getItem('contacts'));\r\n  if (savedState) initialState = savedState;\r\n} catch (error) {\r\n  console.error(error);\r\n}\r\n\r\nconst items = createReducer(initialState, {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) => state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n\r\n// w/o toolkit\r\n\r\n// import { combineReducers } from 'redux';\r\n// import types from './contacts-types';\r\n\r\n// let initialState = [];\r\n\r\n// const initState = () => {\r\n//   try {\r\n//     const savedState = JSON.parse(localStorage.getItem('contacts'));\r\n//     if (savedState) initialState = savedState;\r\n//   } catch (error) {}\r\n// };\r\n\r\n// initState();\r\n\r\n// const items = (state = initialState, { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n\r\n//     case types.DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export default combineReducers({\r\n//   items,\r\n//   filter,\r\n// });\r\n","import { configureStore } from '@reduxjs/toolkit';\r\n\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n});\r\n\r\nconst saveState = (state) => {\r\n  try {\r\n    localStorage.setItem('contacts', JSON.stringify(state.contacts.items));\r\n  } catch (error) {}\r\n};\r\n\r\nstore.subscribe(() => {\r\n  saveState(store.getState());\r\n});\r\n\r\nexport default store;\r\n\r\n// w/o toolkit\r\n\r\n// import { createStore, combineReducers } from 'redux';\r\n\r\n// import contactsReducer from './contacts/contacts-reducer';\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// const saveState = (state) => {\r\n//   console.log(state, 'Save state');\r\n//   try {\r\n//     localStorage.setItem('contacts', JSON.stringify(state.contacts.items));\r\n//   } catch (error) {}\r\n// };\r\n\r\n// // const loadState = () => {\r\n// //   try {\r\n// //     const savedState = JSON.parse(localStorage.getItem('contacts'));\r\n// //     if (savedState) return savedState;\r\n// //   } catch (error) {}\r\n// //   return undefined;\r\n// // };\r\n\r\n// const store = createStore(\r\n//   rootReducer,\r\n//   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n// );\r\n\r\n// store.subscribe(() => {\r\n//   saveState(store.getState());\r\n// });\r\n\r\n// export default store;\r\n","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport * as contactsAction from '../../redux/contacts/contacts-actions';\r\n\r\nexport class ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  addContact = (newContact) => {\r\n    if (this.props.contacts.find((contact) => contact.name === newContact.name)) {\r\n      alert(`${newContact.name} is already in contacts.`);\r\n      return;\r\n    }\r\n    newContact.id = uuidv4();\r\n    this.props.onAddContact(newContact);\r\n\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  changeHandler = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form\r\n        className=\"contact-form\"\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          this.addContact({ ...this.state });\r\n        }}\r\n      >\r\n        <div className=\"form-container\">\r\n          <label className=\"form-label\">\r\n            Name\r\n            <input\r\n              onChange={this.changeHandler}\r\n              value={this.state.name}\r\n              className=\"form-input\"\r\n              type=\"text\"\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n            />\r\n          </label>\r\n          <label className=\"form-label\">\r\n            Number\r\n            <input\r\n              onChange={this.changeHandler}\r\n              value={this.state.number}\r\n              className=\"form-input\"\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n            />\r\n          </label>\r\n          <button className=\"form-submit\" type=\"submit\">\r\n            Add contact\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ contacts: { items } }) => ({\r\n  contacts: items,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onAddContact: (contact) => dispatch(contactsAction.addContact(contact)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport * as contactsAction from '../../redux/contacts/contacts-actions';\r\n\r\nconst Filter = ({ filter, onChange }) => (\r\n  <label className=\"filter-label\">\r\n    Find contacts by name:\r\n    <input className=\"filter-input\" name=\"name\" value={filter} onChange={onChange} />\r\n  </label>\r\n);\r\n\r\nconst mapStateToProps = ({ contacts: { filter } }) => ({ filter });\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChange: (e) => dispatch(contactsAction.changeFilter(e.target.value)),\r\n});\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import PropTypes from 'prop-types';\r\n\r\nconst ContactListItem = ({ name, number, onDelete }) => (\r\n  <li className=\"contact-list-item\">\r\n    <span className=\"contact-name\">{name}:</span>\r\n    <span className=\"contact-number\"> {number}</span>\r\n    <button className=\"contact-delete-btn\" onClick={onDelete}>\r\n      Delete\r\n    </button>\r\n  </li>\r\n);\r\n\r\nContactListItem.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n  onDelete: PropTypes.func,\r\n};\r\n\r\nexport default ContactListItem;\r\n","import { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport * as contactsAction from '../../redux/contacts/contacts-actions';\r\nimport ContactListItem from '../ContactListItem';\r\n\r\nconst ContactList = ({ contacts, filter, onDeleteContact }) => (\r\n  <ul className=\"contact-list\">\r\n    {contacts\r\n      .filter((contact) => contact.name.toLowerCase().includes(filter.toLowerCase().trim()))\r\n      .map((contact) => {\r\n        return (\r\n          <ContactListItem\r\n            key={contact.id}\r\n            name={contact.name}\r\n            number={contact.number}\r\n            onDelete={() => onDeleteContact(contact.id)}\r\n          />\r\n        );\r\n      })}\r\n  </ul>\r\n);\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  contacts: items,\r\n  filter: filter,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDeleteContact: (id) => dispatch(contactsAction.deleteContact(id)),\r\n});\r\n\r\nContactList.defaultProps = {\r\n  filter: '',\r\n};\r\n\r\nContactList.propTypes = {\r\n  filter: PropTypes.string,\r\n  contacts: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import { Component } from 'react';\n\nimport './App.scss';\n\nimport ContactForm from './components/ContactForm/';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList/';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './redux/store';\n\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}